package {	import flash.display.MovieClip;	import flash.events.MouseEvent;	public class Garden extends MovieClip	{		/*Instance properties*/		//declare variable named countScore of type int and assign value 0		var countScore:int = 0;		//declare instance property that is an Array of length 3 with the number of MundaneMoles, StoneMoles and RabidMoles living in the garden 		//assign randome number to the array		private var numberMoles:Array = [Math.round(Math.random() * 10) + 4,Math.round(Math.random() * 10) + 2,Math.round(Math.random() * 10) + 2];		//Create the 3 Arrays of mundaneMoles, stoneMoles and rabidMoles		private var mundaneMoles:Array;		private var stoneMoles:Array;		private var rabidMoles:Array;		public function Garden()		{			// constructor code			//call the method to add more moles			addMoles();								}		//add Moles		public function addMoles():void		{			//initialize the mole instances			//instance property mundaneMoles that is an Array of the MundaneMoles living in the garden			//instance property stoneMoles that is an Array of the StoneMoles living in the garden			//instance property rabidMoles that is an Array of the RabidMoles living in the garden			mundaneMoles = new Array(numberMoles[0]);			stoneMoles = new Array(numberMoles[1]);			rabidMoles = new Array(numberMoles[2]);			//Fill each Array with instances of the corresponding class of Moles			//Each newly created Mole instance is given random x and y coordinates that fall within the width and height of the Garden			//Each Mole has an mouse click listener added to it that is attached to the instance method updateScore			//In each for loop			//give them random locations within the garden			//set listener relationships			//add them to the gardem			for (var i: int = 0; i< mundaneMoles.length; i++)			{				mundaneMoles[i] = new MundaneMole();				mundaneMoles[i].x = Math.random() * this.width * 0.8 + 60;				mundaneMoles[i].y = Math.random() * this.height * 0.6 + 60;				mundaneMoles[i].addEventListener(MouseEvent.CLICK, updateScore);				addChild(mundaneMoles[i]);				mundaneMoles[i].gotoAndPlay (Math.round (Math.random()*130));			}			for (var j: int = 0; j< stoneMoles.length; j++)			{				stoneMoles[j] = new StoneMole();				stoneMoles[j].x = Math.random() * this.width * 0.8 + 60;				stoneMoles[j].y = Math.random() * this.height * 0.6 + 60;				stoneMoles[j].addEventListener(MouseEvent.CLICK, updateScore);				addChild(stoneMoles[j]);				stoneMoles[j].gotoAndPlay(Math.round (Math.random()*100));			}			for (var k: int = 0; k< rabidMoles.length; k++)			{				rabidMoles[k] = new RabidMole();				rabidMoles[k].x = Math.random() * this.width * 0.8 + 60;				rabidMoles[k].y = Math.random() * this.height * 0.6 + 60;				rabidMoles[k].addEventListener(MouseEvent.CLICK, updateScore);				addChild(rabidMoles[k]);				rabidMoles[k].gotoAndPlay(Math.round (Math.random()*100));			}		}		//displays which mole was clicked		public function updateScore(e:MouseEvent):int		{			for (var i: int =0; i < mundaneMoles.length; i++)			{				//conditional checks which mole was clicked				//if mundane mole got clicked, update score by calling pointValue() associated with the mundaneMoles array				if (e.currentTarget == mundaneMoles[i])				{					countScore = countScore + mundaneMoles[i].pointValue();				}			}			for (var k: int =0; k < stoneMoles.length; k++)			{				//conditional checks which mole was clicked				//if stone mole got clicked, update score by calling pointValue() associated with the stoneMoles array				if (e.currentTarget == stoneMoles[k])				{					countScore = countScore + stoneMoles[k].pointValue();				}			}			for (var j: int =0; j < rabidMoles.length; j++)			{				//trace (rabidMoles[j].pointValue());				//conditional checks which mole was clicked				//if rabid mole got clicked, update score by calling pointValue() associated with the rabidMoles array				if (e.currentTarget == rabidMoles[j])				{					countScore = countScore + rabidMoles[j].pointValue();				}			}			scoreField.text = countScore.toString();			return countScore;		}	}}